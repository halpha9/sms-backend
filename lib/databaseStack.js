"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
class DatabaseStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userTable = new aws_dynamodb_1.Table(this, `${process.env.PROJECT_NAME}-user-table`, {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
            partitionKey: { name: "id", type: aws_dynamodb_1.AttributeType.STRING },
        });
        const roomTable = new aws_dynamodb_1.Table(this, `${process.env.PROJECT_NAME}-room-table`, {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
            partitionKey: { name: "id", type: aws_dynamodb_1.AttributeType.STRING },
        });
        const messageTable = new aws_dynamodb_1.Table(this, `${process.env.PROJECT_NAME}-message-table`, {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
            partitionKey: { name: "id", type: aws_dynamodb_1.AttributeType.STRING },
        });
        messageTable.addGlobalSecondaryIndex({
            indexName: "messages-by-room-id",
            partitionKey: { name: "roomId", type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: "createdAt", type: aws_dynamodb_1.AttributeType.STRING },
        });
        const messageTableServiceRole = new aws_iam_1.Role(this, `${process.env.PROJECT_NAME}-MessageTableServiceRole`, {
            assumedBy: new aws_iam_1.ServicePrincipal("dynamodb.amazonaws.com"),
        });
        messageTableServiceRole.addToPolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            resources: [`${messageTable.tableArn}/index/messages-by-room-id`],
            actions: ["dymamodb:Query"],
        }));
        this.roomTable = roomTable;
        this.userTable = userTable;
        this.messageTable = messageTable;
    }
}
exports.DatabaseStack = DatabaseStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2VTdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGFiYXNlU3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTBFO0FBQzFFLDJEQUE2RTtBQUM3RSxpREFLNkI7QUFLN0IsTUFBYSxhQUFjLFNBQVEsbUJBQUs7SUFLdEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF5QjtRQUNqRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFNBQVMsR0FBRyxJQUFJLG9CQUFLLENBQ3pCLElBQUksRUFDSixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxhQUFhLEVBQ3hDO1lBQ0UsYUFBYSxFQUFFLDJCQUFhLENBQUMsT0FBTztZQUNwQyxXQUFXLEVBQUUsMEJBQVcsQ0FBQyxlQUFlO1lBQ3hDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLDRCQUFhLENBQUMsTUFBTSxFQUFFO1NBQ3pELENBQ0YsQ0FBQztRQUVGLE1BQU0sU0FBUyxHQUFHLElBQUksb0JBQUssQ0FDekIsSUFBSSxFQUNKLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLGFBQWEsRUFDeEM7WUFDRSxhQUFhLEVBQUUsMkJBQWEsQ0FBQyxPQUFPO1lBQ3BDLFdBQVcsRUFBRSwwQkFBVyxDQUFDLGVBQWU7WUFDeEMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsNEJBQWEsQ0FBQyxNQUFNLEVBQUU7U0FDekQsQ0FDRixDQUFDO1FBRUYsTUFBTSxZQUFZLEdBQUcsSUFBSSxvQkFBSyxDQUM1QixJQUFJLEVBQ0osR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksZ0JBQWdCLEVBQzNDO1lBQ0UsYUFBYSxFQUFFLDJCQUFhLENBQUMsT0FBTztZQUNwQyxXQUFXLEVBQUUsMEJBQVcsQ0FBQyxlQUFlO1lBQ3hDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLDRCQUFhLENBQUMsTUFBTSxFQUFFO1NBQ3pELENBQ0YsQ0FBQztRQUVGLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQztZQUNuQyxTQUFTLEVBQUUscUJBQXFCO1lBQ2hDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLDRCQUFhLENBQUMsTUFBTSxFQUFFO1lBQzVELE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLDRCQUFhLENBQUMsTUFBTSxFQUFFO1NBQzNELENBQUMsQ0FBQztRQUVILE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxjQUFJLENBQ3RDLElBQUksRUFDSixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSwwQkFBMEIsRUFDckQ7WUFDRSxTQUFTLEVBQUUsSUFBSSwwQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQztTQUMxRCxDQUNGLENBQUM7UUFFRix1QkFBdUIsQ0FBQyxXQUFXLENBQ2pDLElBQUkseUJBQWUsQ0FBQztZQUNsQixNQUFNLEVBQUUsZ0JBQU0sQ0FBQyxLQUFLO1lBQ3BCLFNBQVMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLFFBQVEsNEJBQTRCLENBQUM7WUFDakUsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7U0FDNUIsQ0FBQyxDQUNILENBQUM7UUFFRixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNuQyxDQUFDO0NBQ0Y7QUFoRUQsc0NBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2ZuT3V0cHV0LCBSZW1vdmFsUG9saWN5LCBTdGFjaywgU3RhY2tQcm9wcyB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgQXR0cmlidXRlVHlwZSwgQmlsbGluZ01vZGUsIFRhYmxlIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1keW5hbW9kYlwiO1xuaW1wb3J0IHtcbiAgRWZmZWN0LFxuICBQb2xpY3lTdGF0ZW1lbnQsXG4gIFJvbGUsXG4gIFNlcnZpY2VQcmluY2lwYWwsXG59IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuXG5pbnRlcmZhY2UgRGF0YWJhc2VTdGFja1Byb3BzIGV4dGVuZHMgU3RhY2tQcm9wcyB7fVxuXG5leHBvcnQgY2xhc3MgRGF0YWJhc2VTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgcHVibGljIHJlYWRvbmx5IHJvb21UYWJsZTogVGFibGU7XG4gIHB1YmxpYyByZWFkb25seSB1c2VyVGFibGU6IFRhYmxlO1xuICBwdWJsaWMgcmVhZG9ubHkgbWVzc2FnZVRhYmxlOiBUYWJsZTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRGF0YWJhc2VTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCB1c2VyVGFibGUgPSBuZXcgVGFibGUoXG4gICAgICB0aGlzLFxuICAgICAgYCR7cHJvY2Vzcy5lbnYuUFJPSkVDVF9OQU1FfS11c2VyLXRhYmxlYCxcbiAgICAgIHtcbiAgICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgICBiaWxsaW5nTW9kZTogQmlsbGluZ01vZGUuUEFZX1BFUl9SRVFVRVNULFxuICAgICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogXCJpZFwiLCB0eXBlOiBBdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCByb29tVGFibGUgPSBuZXcgVGFibGUoXG4gICAgICB0aGlzLFxuICAgICAgYCR7cHJvY2Vzcy5lbnYuUFJPSkVDVF9OQU1FfS1yb29tLXRhYmxlYCxcbiAgICAgIHtcbiAgICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgICBiaWxsaW5nTW9kZTogQmlsbGluZ01vZGUuUEFZX1BFUl9SRVFVRVNULFxuICAgICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogXCJpZFwiLCB0eXBlOiBBdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCBtZXNzYWdlVGFibGUgPSBuZXcgVGFibGUoXG4gICAgICB0aGlzLFxuICAgICAgYCR7cHJvY2Vzcy5lbnYuUFJPSkVDVF9OQU1FfS1tZXNzYWdlLXRhYmxlYCxcbiAgICAgIHtcbiAgICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgICBiaWxsaW5nTW9kZTogQmlsbGluZ01vZGUuUEFZX1BFUl9SRVFVRVNULFxuICAgICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogXCJpZFwiLCB0eXBlOiBBdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICBtZXNzYWdlVGFibGUuYWRkR2xvYmFsU2Vjb25kYXJ5SW5kZXgoe1xuICAgICAgaW5kZXhOYW1lOiBcIm1lc3NhZ2VzLWJ5LXJvb20taWRcIixcbiAgICAgIHBhcnRpdGlvbktleTogeyBuYW1lOiBcInJvb21JZFwiLCB0eXBlOiBBdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgc29ydEtleTogeyBuYW1lOiBcImNyZWF0ZWRBdFwiLCB0eXBlOiBBdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgbWVzc2FnZVRhYmxlU2VydmljZVJvbGUgPSBuZXcgUm9sZShcbiAgICAgIHRoaXMsXG4gICAgICBgJHtwcm9jZXNzLmVudi5QUk9KRUNUX05BTUV9LU1lc3NhZ2VUYWJsZVNlcnZpY2VSb2xlYCxcbiAgICAgIHtcbiAgICAgICAgYXNzdW1lZEJ5OiBuZXcgU2VydmljZVByaW5jaXBhbChcImR5bmFtb2RiLmFtYXpvbmF3cy5jb21cIiksXG4gICAgICB9XG4gICAgKTtcblxuICAgIG1lc3NhZ2VUYWJsZVNlcnZpY2VSb2xlLmFkZFRvUG9saWN5KFxuICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgIGVmZmVjdDogRWZmZWN0LkFMTE9XLFxuICAgICAgICByZXNvdXJjZXM6IFtgJHttZXNzYWdlVGFibGUudGFibGVBcm59L2luZGV4L21lc3NhZ2VzLWJ5LXJvb20taWRgXSxcbiAgICAgICAgYWN0aW9uczogW1wiZHltYW1vZGI6UXVlcnlcIl0sXG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLnJvb21UYWJsZSA9IHJvb21UYWJsZTtcbiAgICB0aGlzLnVzZXJUYWJsZSA9IHVzZXJUYWJsZTtcbiAgICB0aGlzLm1lc3NhZ2VUYWJsZSA9IG1lc3NhZ2VUYWJsZTtcbiAgfVxufVxuIl19